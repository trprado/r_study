{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"install.packages(\"GGally\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":".rs.callAs(name, hook, original, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withCallingHandlers(tryCatch(f(...), error = function(e) {\n    cat(\"Error in \", name, \" : \", e$message, \"\\n\", sep = \"\")\n}), warning = function(w) {\n    if (getOption(\"warn\") >= 0)  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(f(...), error = function(e) {\n    cat(\"Error in \", name, \" : \", e$message, \"\\n\", sep = \"\")\n})","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"f(...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"original(pkgs, lib, repos, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"warning(gettextf(\"installation of package %s had non-zero exit status\", \n    sQuote(update[i, 1L])), domain = NA)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":".signalSimpleWarning(\"installation of package ‘GGally’ had non-zero exit status\", \n    base::quote(original(pkgs, lib, repos, ...)))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withRestarts({\n    .Internal(.signalCondition(simpleWarning(msg, call), msg, \n        call))\n    .Internal(.dfltWarn(msg, call)) ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"makeRestartList(...)","line_number":0}],"message":"no loop for break/next, jumping to top level"}