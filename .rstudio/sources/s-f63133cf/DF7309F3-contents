Lesson 6
========================================================

### Welcome
Notes:

***

### Scatterplot Review

```{r Scatterplot Review}
library(ggplot2)

data(diamonds)
ggplot(data = diamonds,
       aes(x = carat, y = price)) +
  geom_point() +
  geom_smooth(method = 'lm') +
  xlim(
    quantile(diamonds$carat, .01),
    quantile(diamonds$carat, .99)
  ) +
  ylim(
    quantile(diamonds$price, .01),
    quantile(diamonds$price, .99)
  )

```

***

### Price and Carat Relationship
**Response:** Parece uma relação não linear exponencial, quanto maior o quilates mais disperços os dados se encontram.

***

### Frances Gerety
Notes:

#### A diamonds is forever.


***

### The Rise of Diamonds
Notes:

***

### ggpairs Function
Notes:

```{r ggpairs Function, message=FALSE, warning=FALSE, fig.width=20, fig.height=20, fig.align='center'}
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')

# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)

# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
        lower = list(continuous = wrap("points", shape = I('.'))),
        upper = list(combo = wrap("box", outlier.shape = I('.'))),
        axisLabels = 'internal')
```

What are some things you notice in the ggpairs output?
**Response:** Existe uma ótima correlação entre as variáveis de quilate, preço, x, y e z, porém as demais tem uma baixa correlação. Em sua maioria as correlações parecem ser de exponenciais.

***

### The Demand of Diamonds
Notes:

```{r The Demand of Diamonds}
library(gridExtra)

plot1 <- ggplot(data = diamonds,
                aes(x = price)) +
  geom_histogram(binwidth = 100) +
  ggtitle('Price')

plot2 <- ggplot(data = diamonds,
                aes(x = price)) +
  geom_histogram(binwidth = 0.01) +
  scale_x_log10() +
  ggtitle('Price (log10)')

grid.arrange(plot1, plot2)
```

***

### Connecting Demand and Price Distributions
Notes: O gráfico a esquerda se mostra bem distocido comparado ao gráfico modificado. No gráfico modificado temos algo mais próximo de uma normal.

***

### Scatterplot Transformation

```{r Scatterplot Transformation}
ggplot(data = diamonds,
       aes(x = carat, y = price)) +
  geom_point() +
  scale_y_continuous(trans = 'log10') +
  ggtitle('Price (log10) by Carat')
  
```


### Create a new function to transform the carat variable

```{r cuberoot transformation}
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
                                      inverse = function(x) x^3)
```

#### Use the cuberoot_trans function
```{r Use cuberoot_trans}
ggplot(aes(carat, price), data = diamonds) + 
  geom_point() + 
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
                     breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
                     breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle('Price (log10) by Cube-Root of Carat')
```

***

### Overplotting Revisited

```{r Sort and Head Tables}
head(sort(table(diamonds$carat), decreasing = TRUE))
head(sort(table(diamonds$price), decreasing = TRUE))
```


```{r Overplotting Revisited}
ggplot(aes(carat, price), data = diamonds) + 
  geom_point(alpha = 1/2, size = 3/4, position = 'jitter') + 
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
                     breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
                     breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle('Price (log10) by Cube-Root of Carat')
```

***

### Other Qualitative Factors
Notes:

***

### Price vs. Carat and Clarity

Alter the code below.
```{r Price vs. Carat and Clarity}
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)

ggplot(aes(x = carat, y = price), data = diamonds) + 
  geom_point(alpha = 0.5, size = 0.75, position = 'jitter', aes(color = clarity)) +
  scale_color_brewer(type = 'div',
    guide = guide_legend(title = 'Clarity', reverse = T,
    override.aes = list(alpha = 1, size = 2))) +  
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
    breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
    breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
```

***

### Clarity and Price
**Response:** Sim, cada cor tem uma faixa, IF sempre esta com valores mais altos por carat enquanto I1 sempre aparece com os menores valores.

***

### Price vs. Carat and Cut

Alter the code below.
```{r Price vs. Carat and Cut}
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) + 
  geom_point(alpha = 0.5, size = 0.75, position = 'jitter') +
  scale_color_brewer(type = 'div',
                     guide = guide_legend(title = 'Cut', reverse = T,
                                          override.aes = list(alpha = 1, size = 2))) +  
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
                     breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
                     breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle('Price (log10) by Cube-Root of Carat and Cut')
```

***

### Cut and Price
**Response:** Não, a grande maioria esta com corte como ideal o que não mostra uma grande variação.

***

### Price vs. Carat and Color

Alter the code below.
```{r Price vs. Carat and Color}
ggplot(aes(x = carat, y = price, color = color), data = diamonds) + 
  geom_point(alpha = 0.5, size = 1, position = 'jitter') +
  scale_color_brewer(type = 'div',
                     guide = guide_legend(title = 'Color', reverse = FALSE,
                                          override.aes = list(alpha = 1, size = 2))) +  
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
                     breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
                     breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle('Price (log10) by Cube-Root of Carat and Color')
```

***

### Color and Price
**Response:** Sim, existe uma visão clara que cores como D e E tem maior valor enquanto cores como I e J tem valor inferior independetemente do quilate do diamante.

***

### Linear Models in R
Notes:

**Response:** log10(price) ~ carat ^(1/3)

***

### Building the Linear Model
Notes:

```{r Building the Linear Model}
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
```

Notice how adding cut to our model does not help explain much of the variance
in the price of diamonds. This fits with out exploration earlier.

***

### Model Problems
Video Notes:

Research:
(Take some time to come up with 2-4 problems for the model)
(You should 10-20 min on this)

**Response:** O preço pode estar errado dependendo da data de coleta, é preciso calcular a inflação ao longo dos anos, problemas financeiros podem acarretar também em preços discrepantes além de uma alta demanda como ocorreu na china com uma baixa no fornecimento do produto pode acarretar em aumentos.

***

### A Bigger, Better Data Set
Notes:

```{r A Bigger, Better Data Set}
# install.package('bitops')
# install.packages('RCurl')
library('bitops')
library('RCurl')

diamondsurl = getBinaryURL("https://raw.githubusercontent.com/SolomonMg/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsbig
```

The code used to obtain the data is available here:
https://github.com/solomonm/diamonds-data

## Building a Model Using the Big Diamonds Data Set
Notes:

```{r Building a Model Using the Big Diamonds Data Set}
diamondsbig$logprice <- log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)), data = subset(diamondsbig, price < 10000 & cert == 'GIA'))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)

mtable(m1, m2, m3, m4, m5)
```


***

## Predictions

Example Diamond from BlueNile:
Round 1.00 Very Good I VS1 $5,601

```{r}
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
                         color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
                        interval="prediction", level = .95)

exp(modelEstimate)
```

```{r}
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)

ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
  geom_line(stat = "summary", fun.y = sd)
```


Evaluate how well the model predicts the BlueNile diamond's price. Think about the fitted point estimate as well as the 95% CI.

A previsão foi bem próxima do esperado para valores com relação a diamantes com essa especificações para um nível de confiance de 95%, porém esse tipo de diamante deveria ser um pouco mais caro do que o preço indicado.



***

## Final Thoughts
Notes:

***

Click **KnitHTML** to see all of your hard work and to have an html
page of this lesson, your answers, and your notes!

